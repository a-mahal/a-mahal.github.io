<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-22T12:45:07-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Arjun Mahal</title><subtitle>This is my personal wesite. All work  posted does not represent my employer. </subtitle><entry><title type="html">Consulting Resume</title><link href="http://localhost:4000/jekyll/update/2022/09/14/resume.html" rel="alternate" type="text/html" title="Consulting Resume" /><published>2022-09-14T10:36:35-04:00</published><updated>2022-09-14T10:36:35-04:00</updated><id>http://localhost:4000/jekyll/update/2022/09/14/resume</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/09/14/resume.html"><![CDATA[<p><img src="/assets/Resume_Consulting.png" alt="Headshot990" title="I am open to all opportunities!" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/Resume_Consulting.png" /><media:content medium="image" url="http://localhost:4000/assets/Resume_Consulting.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Medical Percussive Device - Capstone Project</title><link href="http://localhost:4000/jekyll/update/2022/05/16/capstone-project.html" rel="alternate" type="text/html" title="Medical Percussive Device - Capstone Project" /><published>2022-05-16T10:36:35-04:00</published><updated>2022-05-16T10:36:35-04:00</updated><id>http://localhost:4000/jekyll/update/2022/05/16/capstone-project</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/05/16/capstone-project.html"><![CDATA[<p>Have a look at my team’s report here! [report file] [report-file]</p>

<p>[report-file] = https://github.com/a-mahal/a-mahal.github.io/blob/main/assets/Medical%20Percussive%20Device.pdf</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Have a look at my team’s report here! [report file] [report-file]]]></summary></entry><entry><title type="html">Programming Resume</title><link href="http://localhost:4000/jekyll/update/2022/05/16/coding-resume.html" rel="alternate" type="text/html" title="Programming Resume" /><published>2022-05-16T10:36:35-04:00</published><updated>2022-05-16T10:36:35-04:00</updated><id>http://localhost:4000/jekyll/update/2022/05/16/coding-resume</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/05/16/coding-resume.html"><![CDATA[<p><img src="/assets/Resume_Coding.png" alt="Headshot990" title="I am open to all opportunities!" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/Resume.png" /><media:content medium="image" url="http://localhost:4000/assets/Resume.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">3D Prints &amp;amp; Renderings</title><link href="http://localhost:4000/jekyll/update/2022/04/24/3D-Rendering.html" rel="alternate" type="text/html" title="3D Prints &amp;amp; Renderings" /><published>2022-04-24T10:36:35-04:00</published><updated>2022-04-24T10:36:35-04:00</updated><id>http://localhost:4000/jekyll/update/2022/04/24/3D-Rendering</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/04/24/3D-Rendering.html"><![CDATA[<p>This post will display my 3D rendering and 3D printing projects. Each project will be accompanied by an image, the link to the stl file for public use, and a small description about its utility.</p>

<p>Print Hardware/Software</p>
<ul>
  <li>Printer: Ender 3 V2</li>
  <li>Print Material: PLA</li>
  <li>3D Modeling Software: Fusion 360</li>
  <li>Gcode Generation Software: Cura<br />
<strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong><strong>__</strong></li>
</ul>

<h1 id="mechanical-arm-print-and-components">Mechanical Arm Print and Components</h1>

<p>Check out this pubic <a href="https://www.thingiverse.com/thing:4865712">stl file</a> used to print the comonents of the arm.</p>

<p>Additional components for this build include the following</p>
<ul>
  <li>3x MG995/996R servo motor</li>
  <li>3x SG90 servo motor</li>
  <li>6x M5-0.5 16mm bolt</li>
  <li>6x M5-0.5 nut</li>
</ul>

<h1 id="code-for-automation">Code for Automation</h1>
<p>The direct link to the full code can be found (here). There are various ways this arm can be automated based on what you want to accomplish. Belows shows  afew key details on how to program a coaster that automatically throws your can/bottle away for you.</p>

<p>Drone
(coming soon)</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[This post will display my 3D rendering and 3D printing projects. Each project will be accompanied by an image, the link to the stl file for public use, and a small description about its utility.]]></summary></entry><entry><title type="html">Self-Watering Pot</title><link href="http://localhost:4000/jekyll/update/2020/04/24/self-watering-pot.html" rel="alternate" type="text/html" title="Self-Watering Pot" /><published>2020-04-24T10:36:35-04:00</published><updated>2020-04-24T10:36:35-04:00</updated><id>http://localhost:4000/jekyll/update/2020/04/24/self-watering-pot</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/04/24/self-watering-pot.html"><![CDATA[<p>If you have an extremely busy scheduele, this project may be useful for you. It’s easy to neglect our plants, but by implementing this code with a few sensors and actuators, you can automate plant watering to where you never have to worry about your plants being dehydrated!</p>

<p>Reading the voltage drop of a thermistor to create a temperature sensor on Arduino</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">float</span> <span class="no">V</span> <span class="o">=</span> <span class="n">analogRead</span><span class="p">(</span><span class="no">A0</span><span class="p">);</span>
<span class="n">float</span> <span class="no">Vout</span> <span class="o">=</span> <span class="mi">5</span><span class="o">*</span><span class="p">(</span><span class="no">V</span><span class="o">/</span><span class="mi">1023</span><span class="p">);</span>
<span class="n">float</span> <span class="no">R1</span> <span class="o">=</span> <span class="p">(</span><span class="n">thermister</span> <span class="n">rating</span><span class="p">)</span><span class="o">*</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="no">Vin</span><span class="o">/</span><span class="no">Vout</span><span class="p">));</span>
<span class="no">R1</span> <span class="o">=</span> <span class="n">map</span><span class="p">(</span><span class="no">R1</span><span class="p">,</span> <span class="mi">700</span><span class="p">,</span> <span class="mi">6700</span><span class="p">,</span> <span class="mi">500</span><span class="p">,</span> <span class="mi">73</span><span class="p">);</span>
<span class="n">int</span> <span class="no">T</span> <span class="o">=</span> <span class="no">R1</span></code></pre></figure>

<p>Inputting strings from Arduino to Processing to create responsive images</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">void</span> <span class="n">setup</span> <span class="p">{</span>
  <span class="n">println</span><span class="p">(</span><span class="no">Serial</span><span class="p">.</span><span class="nf">list</span><span class="p">());</span>
  <span class="n">myPort</span> <span class="o">=</span> <span class="n">new</span> <span class="no">Serial</span><span class="p">(</span><span class="n">this</span><span class="p">,</span> <span class="no">Serial</span><span class="p">.</span><span class="nf">list</span><span class="p">()[</span><span class="mi">4</span><span class="p">],</span> <span class="mi">115200</span><span class="p">);</span> 
<span class="p">}</span>

<span class="n">void</span> <span class="n">draw</span> <span class="p">()</span> <span class="p">{</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">myPort</span><span class="p">.</span><span class="nf">available</span> <span class="p">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="no">String</span> <span class="n">inString</span> <span class="o">=</span> <span class="n">myport</span><span class="p">.</span><span class="nf">readStringUntil</span><span class="p">(</span><span class="s1">'\n'</span><span class="p">);</span>
    
    <span class="k">if</span> <span class="p">(</span><span class="n">inString</span> <span class="o">!=</span><span class="n">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">inString</span> <span class="o">=</span> <span class="n">trim</span><span class="p">(</span><span class="n">inString</span><span class="p">);</span>
      <span class="no">String</span><span class="p">[]</span> <span class="n">myRaw</span> <span class="o">=</span> <span class="n">splitTokens</span><span class="p">(</span><span class="n">inString</span><span class="p">,</span> <span class="s2">","</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">myRaw</span><span class="p">.</span><span class="nf">length</span> <span class="o">==</span> <span class="mi">3</span><span class="p">){</span>
      <span class="n">int</span> <span class="n">cm</span> <span class="o">=</span> <span class="n">int</span><span class="p">(</span><span class="n">myRaw</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
      <span class="n">int</span> <span class="n">t</span> <span class="o">=</span> <span class="n">int</span><span class="p">(</span><span class="n">myRaw</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
      <span class="n">int</span> <span class="n">b</span> <span class="o">=</span> <span class="n">int</span><span class="p">(</span><span class="n">myRaw</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span>
    <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>The physical components of this project are listed below. (will add specific part numbers)</p>
<ul>
  <li><code class="highlighter-rouge">2 servo motors</code></li>
  <li><code class="highlighter-rouge">thermistor</code></li>
  <li><code class="highlighter-rouge">miniature pump</code></li>
  <li><code class="highlighter-rouge">ultrasonic sensor</code></li>
  <li><code class="highlighter-rouge">two flower pots</code></li>
  <li><code class="highlighter-rouge">custom design to hold components</code></li>
</ul>

<p>Link to project files: (coming soon)</p>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[If you have an extremely busy scheduele, this project may be useful for you. It’s easy to neglect our plants, but by implementing this code with a few sensors and actuators, you can automate plant watering to where you never have to worry about your plants being dehydrated!]]></summary></entry></feed>